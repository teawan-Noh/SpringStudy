<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.min.edu.model.UserDaoImpl">
	<!-- 
		resultMap : 1:n Join방식으로 하나에 여러개의 값을 담을 때
					쿼리문은 같지만 반환값을 제한할 때
					쿼리문의 컬럼 명이 변화(함수, 연산)가 있을 때 (Alias를 사용하지 않고)
	 -->
	 <!-- 로그인일때만 사용하는 resultMap -->
	 <resultMap type="uDto" id="loginMap">
	 	<result property="id" column="ID"/> <!-- 호출되는 property는 type 객체의 setter -->
	 	<result property="name" column="NAME"/>
	 	<result property="auth" column="AUTH"/>
	 </resultMap>
	 
	 <!-- 
	 	바인딩 - #, $바인딩이 있음/
	 	#{} : DTO/VO의 getter, JCF MAP 키를 호출. 헝가리안 방식을 사용하므로 확인 필요, 바인딩된 값을 '(single quote)처리
	 	${} : 문자열 바인딩, 컬럼과 같이 '(single quote) 처리를 하지 않고 문자로 처리. Sql Injection 공격을 할 수 있다.
	  -->
	  <select id="login" parameterType="uDto" resultMap="loginMap">
	  	SELECT ID, PW, NAME, REGDATE, AUTH, DELFLAG
	  		FROM HAPPYMEMBER
	  		WHERE ID=#{id} AND PW=#{pw}
	  </select>
	  
	  <!-- 
	  	selectKey 
	  	회원가입인데 자동으로 부여되는 ID
	  -->
	  <insert id="regist" parameterType="uDto">
	  	INSERT INTO HAPPYMEMBER(ID, NAME, PW, AUTH, DELFLAG, REGDATE)
	  		VALUES(#{id}, #{name}, #{pw}, 'A' , 'N', SYSDATE)
	  		<selectKey keyProperty="id" resultType="java.lang.String" order="AFTER">
	  			SELECT ID FROM HAPPYMEMBER WHERE ID=#{id} AND PW=#{pw}
	  		</selectKey>
	  </insert>
	  
	  <!-- 
	  		Wrapper 클래스와 String으로 ParameterType을 처리했을 경우 
	  		mybatis에서는 resultType을 선언하지 않아도 됨, 명확한 WrapperClass의 이름을 사용하지 않아도 됨 ex)java.lang.Integer->int
	  		WrapperClass가 아닌 객체 POJO(encapsulation) 객체는 getter/setter
	  		Map {key:value} key
	  		
	  		WrapperClass나 Map을 사용하는 이유는 mybatis는 객체에 담겨있는 변수만을 dynamic쿼리 처리할 수 있다.
	  -->
	  <select id="checkUser" parameterType="java.lang.String" resultType="java.lang.String">
	  		SELECT ID FROM HAPPYMEMBER WHERE ID=#{val}
	  </select>
	  
	  <!-- 
	  	XML(즉, markup)과 같은 태그의 문법은 열고 닫음으로 구성되어 있음(Well-formed)
	  	<는 무조건 태그의 시작이라는 문법.따라서 <가 포함되어있는 문자열을 parse(문법으로 변경 인식)하지 않고
	  	사용하기 위해서 CDATA라는 문법으로 처리해야 한다.
	  	
	  	java escape문자 \표기 후 문자 ex)\"
	  	html entity tag 표를 통해서 변경 ex < &lt;
	  	javascript 문자로 인식 uriEncodingComponent를 통ㅇ해서 처리할 수 있다.
	  	
	   -->
	   <select id="CDATA_TEST" parameterType="java.lang.String" resultType="java.lang.String">
	   		<![CDATA[SELECT * FROM ANSWERBOARD WHERE SEQ < #{num}]]>
	   		
	   </select>
</mapper>






