<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">
	
	<!-- 1. 접속정보 Properties 파일 bean 생성(읽어오기) -->
	<context:property-placeholder location="classpath:properties/db.properties"/>
	
	<!-- 
		2. 접속정보객체 BasicDataSource bean 생성 
		commons.dbcp.jar필요
		org.apache.tomcat.dbcp.dbcp2.BasicDataSource는 에러남(디펜던시 추가 안해도 javax에 원래 들어있음)
		property는 메소드, constructor는 생성자
		namespaces p 를 선언했다면
		<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		p:driverClassName=${driver} p:url=${url} ~~~>
		
		mybatis만 #, 나머지 마크업은 $
	-->
	
	<!-- value가 예약어이면 같이 바인딩되므로 이름 다르게 할것 -->
	<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource">
		<property name="driverClassName" value="${driver}"/>
		<property name="url" value="${url}"/>
		<property name="username" value="${user}"/>
		<property name="password" value="${pw}"/>
	</bean>
	
	<!-- 
		3. MyBatis SqlSessionFactory를 Bean 생성(SqlSessionFactoryBean) 
		MyBatis.jar 필요
		mybatis-spring.jar 필요
		MyBatis는 두개의 정보가 필요하다.
			1. 접속정보 -> 스프링한테 있음
			2. MyBatis에서 사용하는 환경(Alias, Setting, Mapper등) -> Configuration.xml에 있음
	-->
	<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="configLocation" value="classpath:mybatis/configuration.xml"/>
	</bean>
	
	
	<!-- 4. Spring DI(의존적 주입)을 위한 SqlSessionTemplate bean 생성 -->
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
		<constructor-arg ref="sqlSessionFactoryBean"/>
	</bean>
	
	<!-- 
		5. tx Transaction을 위한 TransactionManager 생성 
			1.Annotation을 위한 설정 => servlet-context.xml <tx:annotation-driven/>이 필요하다.
			2.AOP 설정 => advice(실행되는 메소드), pointCut(실행되는 곳), joinPoint(합쳐지는 곳)
		=> spring-orm.jar 필요
	-->	
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource"/>
	</bean>	
	
	<!-- 
		servlet-context.xml의 Annotation 설정이 아닌 자동으로 AOP를 통해서 Transaction이 동작한다.
		Transaction의 동작 메소드는 throw가 발생한다. 즉, 예외가 발생했을 때 Transaction을 작동시킨다.
		advice가 예외 발생시 작동된다.
	 -->
	 
	 <!-- 같은 기능이 동작되어서 conflict발생 => servlet-context.xml의 <tx:annotation-driven transaction-manager="transactionManager"/> -->
	 <tx:advice id="txManager" transaction-manager="transactionManager">
	 	<tx:attributes>
	 		<tx:method name="*" propagation="REQUIRED" rollback-for="Exception"/>
	 	</tx:attributes>
	 </tx:advice>
		
	<aop:config>
		<aop:advisor advice-ref="txManager" pointcut="execution(public * com.min.edu.model.*Service*.*(..))"/>
	</aop:config>
	
	<!-- 메일보내기 -->
	<!-- 서버의 정보를 입력해주면 됨 -->
	<bean id="javaMailSender" class="org.springframework.mail.javamail.JavaMailSenderImpl">
		<property name="host" value="smtp.gmail.com"/>
		<property name="port" value="587"/>
		<property name="username" value="taewanno93@gmail.com"/>
		<!-- <property name="password" value="sh1313!@"/> -->
		<!-- 만약에 비밀번호에 특수문자가 있다면 CDATA 처리를 해야한다 -->
		<property name="password">
			<value>
				<![CDATA[sh1313!@]]>
			</value>
		</property>
		<property name="javaMailProperties">
			<props>
				<prop key="mail.smtp.debug">true</prop> <!-- 메일을 보낼때 log -->
				<prop key="mail.smtp.auth">true</prop>
				<prop key="mail.transport.protocol">smtp</prop>
				<!-- 만약 TLS가 문제가 발생하면 false로 해도 됨 아니면 인증키를 생성 -->
				<prop key="mail.smtp.starttls.enable">true</prop>
			</props>
		</property>
	</bean>
	
	
</beans>
