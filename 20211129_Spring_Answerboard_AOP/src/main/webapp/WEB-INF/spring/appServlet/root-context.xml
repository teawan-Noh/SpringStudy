<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

<!-- TODO 4. DB의 접속정보인 src/main/java에 있는 propertise 파일을 bean으로 만듦 -->
<!-- <context:property-placeholder location="classpath:properties/oracle.properties"/> -->
<context:property-placeholder location="classpath:properties/oracle.properties"/>

<!-- <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
	<property name="locations">
		<list>
			<value>classpath:properties/oracle.properties</value>
		</list>
	</property>
</bean> -->

<!-- TODO 5. DataSource를 생성하여 DB접속 권한을 Spring이 IoC(제어의역전)를 가질 수 있도록 함 -->
<bean id="dataSource" class="org.apache.commons.dbcp2.BasicDataSource">
	<property name="driverClassName" value="${driver}"/>
	<property name="url" value="${url}"/>
	<property name="username" value="${user}"/>
	<property name="password" value="${pw}"/>
</bean>

<!-- TODO 6. SqlSessionFactory 객체를 생성하여 bean을 사용하는 SqlSessionFactoryBean 
		접속정보 : dataSource, Mybatis의 Alias,Mapper의 설정 파일 configuration.xml
-->
<bean id="sqlSessionFactoryBean" class="org.mybatis.spring.SqlSessionFactoryBean">
	<property name="dataSource" ref="dataSource"/>
	<!-- <property name="configLocation" value="/WEB-INF/spring/sqls/Configuration.xml"/> -->
	<property name="configLocation" value="classpath:sqls/Configuration.xml"/>
</bean>

<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
	<constructor-arg ref="sqlSessionFactoryBean"/>
</bean>

<!-- Transaction은 접속정보인 Connection 객체에 설정 -->
<!-- 21번째 줄의 bean을 통해서 transaction을 제어할 수 있다.// ref=21번줄 빈의 id -->
<!-- 답글의 update & insert 기능을 Transaction 처리(all or nothing) 함 -->

<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
	<property name="dataSource" ref="dataSource"/>
</bean>

<!-- AOP를 통한 Transaction 처리 -->
<tx:advice id="txAdvice" transaction-manager="transactionManager">
	<tx:attributes>
		<tx:method name="*" propagation="REQUIRED" rollback-for="Exception"/>
	</tx:attributes>
</tx:advice>

<aop:config>
	<aop:advisor advice-ref="txAdvice" pointcut="execution(public * com.min.edu.model.service.*Service*.*(..) )"/>
</aop:config>
</beans>
